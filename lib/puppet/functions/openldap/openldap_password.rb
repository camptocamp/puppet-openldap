# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'base64'

# ---- original file header ----
#
# @summary
#         Returns the openldap password hash from the clear text password.
#
#
Puppet::Functions.create_function(:'openldap::openldap_password') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    raise(Puppet::ParseError, "openldap_password(): Wrong number of arguments given") if args.size < 1 or args.size > 2

    secret = args[0]
    scheme = args[1] || '{SSHA}'

    Puppet::Parser::Functions.function('fqdn_rand_string')

    case scheme[/([A-Z,0-9]+)/, 1]
    when 'CRYPT'
      salt = function_fqdn_rand_string([2])
      password = '{CRYPT}' + secret.crypt(salt)
    when 'MD5'
      password = '{MD5}' + Digest::MD5.hexdigest(secret)
    when 'SMD5'
      salt = function_fqdn_rand_string([8])
      md5_hash_with_salt = "#{Digest::MD5.digest(secret + salt)}#{salt}"
      password = '{SMD5}' + [md5_hash_with_salt].pack('m').gsub("\n", '')
    when 'SSHA'
      salt = function_fqdn_rand_string([8])
      password = '{SSHA}' + Base64.encode64("#{Digest::SHA1.digest(secret + salt)}#{salt}").chomp
    when 'SHA'
      password = '{SHA}' + Digest::SHA1.hexdigest(secret)
    else
      raise(Puppet::ParseError, "openldap_password(): Unrecognized scheme #{scheme}")
    end

    password
  
  end
end
